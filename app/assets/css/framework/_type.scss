/**
 * Type SCSS File
 */

/**
 * Sets up basic type variables, and includes em & rem functions for easily
 * converting measurements from pixels to a more cross-browser-friendly
 * measurement.
**/

// Our base font size for the site. Usually the most common body copy font size.
$font-default-size: 20;

// Our base line height.
$font-default-line-height: 1.5;

// Our base font stack.
$font-stack-regular: "sans-serif";

/* ==|== Type =================
	Functions
========================================== */

/**
 * Takes a pixel value, and turns it in to the corresponding em value.
 *
 * Has an optional second parameter, which alters the base em value.
 * This can be useful when calculating a measurement on an element with
 * an altered font size.

 * @param int $target 	The pixel value you're converting.
 * @param int $content 	The base em value. If no value
 *						is provided, the $font-default-size value is
 *						used.
 */

/**
 * === EXAMPLE === *

 Both these examples output a padding-left value equivalent to 30px.

 $font-default-size:20;

 .element {
 	padding-left:em(30); // => padding-left: 1.5em;
 }

.element--large {
	font-size:2rem;
	padding-left:em(30, 40); // => padding-left: 0.75em;
}
*/

@function em($target, $content: $font-default-size) {
	@if $target == 0 { @return 0 }
	@return $target / $content + 0em;
}

/**
 * Takes a pixel value, and turns it in to the corresponding rem value.
 *
 * Has an optional second parameter, which alters the base rem value.
 * This can be useful when calculating a measurement on an element with
 * an altered font size.

 * @param int $target 	The pixel value you're converting.
 * @param int $content 	The base rem value. If no value
 *						is provided, the $font-default-size value is
 *						used.
 */

@function rem($target, $content: $font-default-size) {
	@if $target == 0 { @return 0 }
	@return $target / $content + 0rem;
}

/* ==|== Type =================
	Mixins
========================================== */

/**
 * Converts a pixel-based font size to a rem font size, with px fallback
 * for IE <= 8.
 *
 * @param int $value	The pixel value you're converting.
 * @param int $base 	The base rem value. If no value is provided, the
 * 						$font-default-size value is used.
**/

@mixin font-size($value, $base: $font-default-size) {
	$rem: $value/$base;
	font-size:$value + px;
	font-size:$rem + rem;
}